# CSV of yolov3 - gt 

import numpy as np
import cv2
import io
import pandas as pd 
import xml.etree.ElementTree as ET
import seaborn as sns
sns.set(style="dark")
import glob
import os
import warnings as wr

wr.filterwarnings("ignore")

try:
    to_unicode = unicode
except NameError:
    to_unicode = str

train_path=r'Train/Train/JPEGImages'
train_annot=r'Train/Train/Annotations'

test_path=r'Test/Test/JPEGImages'
test_annot=r'Test/Test/Annotations'

df = pd.read_csv('output.csv') 
glob_count = 1
tp = 0
fp = 0
fn = 0
iou_list = []


def bb_intersection_over_union(boxA, boxB):
    xA = max(boxA[0], boxB[0])
    yA = max(boxA[1], boxB[1])
    xB = min(boxA[2], boxB[2])
    yB = min(boxA[3], boxB[3])
    interArea = max(0, xB - xA + 1) * max(0, yB - yA + 1)
    boxAArea = (boxA[2] - boxA[0] + 1) * (boxA[3] - boxA[1] + 1)
    boxBArea = (boxB[2] - boxB[0] + 1) * (boxB[3] - boxB[1] + 1)
    iou = interArea / float(boxAArea + boxBArea - interArea)
    return iou

def iou_mapping(box_yolo,gt_boxes):
    global df,glob_count,tp,fn,fp,iou_list
    overall_iou = []
    max_iou = 0
    for i in gt_boxes:
        single_iou = bb_intersection_over_union(box_yolo,i)
        overall_iou.append(single_iou)
        max_iou = max(overall_iou)
        '''
        ind = overall_iou.index(max_iou)
        gt = gt_boxes[ind]
        if max_iou > 0.5:
            tp += 1
            gt = gt_boxes[ind]
            df.loc [glob_count-1 , 'gt_x'] = gt[0]
            df.loc [glob_count-1 , 'gt_y'] = gt[1]
            df.loc [glob_count-1 , 'gt_xmax'] = gt[2]
            df.loc [glob_count-1 , 'gt_ymax'] = gt[3]
            df.loc [glob_count-1 , 'iou'] = max_iou
            '''
    if len(overall_iou) == 0:
        fn += 1
    else:
        max_iou = max(overall_iou)
        ind = overall_iou.index(max_iou)
    if max_iou == 0:
        fn += 1
    else:
        if max_iou > 0.5:
            tp += 1
            gt = gt_boxes[ind]
            df.loc [glob_count-1 , 'gt_x'] = gt[0]
            df.loc [glob_count-1 , 'gt_y'] = gt[1]
            df.loc [glob_count-1 , 'gt_xmax'] = gt[2]
            df.loc [glob_count-1 , 'gt_ymax'] = gt[3]
            df.loc [glob_count-1 , 'iou'] = max_iou
        else:
            fp += 1
    iou_list.append(max_iou)
    

def creatingInfoData(Annotpath):
    information={'xmin':[],'ymin':[],'xmax':[],'ymax':[],'ymax':[],'name':[]
                ,'label':[]}

    for file in sorted(glob.glob(str(Annotpath+'/*.xml*'))):
        dat=ET.parse(file)
        for element in dat.iter():    

            if 'object'==element.tag:
                for attribute in list(element):
                    if 'name' in attribute.tag:
                        name = attribute.text                 
                        information['label'] += [name]
                        information['name'] +=[file.split('/')[-1][0:-4]]

                    if 'bndbox'==attribute.tag:
                        for dim in list(attribute):
                            if 'xmin'==dim.tag:
                                xmin=int(round(float(dim.text)))
                                information['xmin']+=[xmin]
                            if 'ymin'==dim.tag:
                                ymin=int(round(float(dim.text)))
                                information['ymin']+=[ymin]
                            if 'xmax'==dim.tag:
                                xmax=int(round(float(dim.text)))
                                information['xmax']+=[xmax]
                            if 'ymax'==dim.tag:
                                ymax=int(round(float(dim.text)))
                                information['ymax']+=[ymax]
                     
    return pd.DataFrame(information)

def evaluate():
    global tp,fp,fn,iou_list
    df = pd.read_csv('output.csv')
    prec = tp / float(tp + fp)
    recall = tp / float(tp + fn)
    f1_score = 2*prec*recall/(prec+recall)
    iou_avg = sum(iou_list) / len(iou_list)
    print(df)
    print('\n')
    print('Precision:',prec)
    print('Recall:',recall)
    print('F1 score:',f1_score)
    print('Avg IOU:',iou_avg)


if __name__ == '__main__':
    train_info = creatingInfoData(train_annot)
    test_info = creatingInfoData(test_annot)
    #print(test_info)
    test_images = sorted(glob.glob(os.path.join(test_path,"*.jpg")))
    color = (255,0,0)
    thickness = 2
    it = 1
    i = 1
    for k in range(1,236):
        inp_path = 'Test/Test/JPEGImages/' + 'image (' + str(k) + ')' + '.jpg'
        img_id = 'image (' + str(k) + ')'
        labels = test_info[test_info.name == img_id]
        img = cv2.imread(inp_path)
        gt_boxes = []
        for index, lab in labels.iterrows():
            gt_boxes.append([lab['xmin'], lab['ymin'], lab['xmax'], lab['ymax']])
        #coco_classes = None
        #with open('coco.names','r') as f:
        #    coco_classes = [line.strip() for line in f.readlines()]
        #net = cv2.dnn.readNet('yolov3.weights','yolov3.cfg')
        #detector(img,i,gt_boxes)
        flag = True
        while flag and glob_count <= len(df):
            if df.iloc[glob_count -1, 1] != k:
                flag = False
                break
            xloc = 2
            yloc = 3
            xmloc= 4
            ymloc = 5
            x = df.iloc[glob_count - 1 , xloc]
            y = df.iloc[glob_count - 1 , yloc]
            xmax = df.iloc[glob_count - 1 , xmloc]
            ymax = df.iloc[glob_count - 1 , ymloc]
            box_yolo = [x,y,xmax,ymax]
            iou_mapping(box_yolo,gt_boxes)
            glob_count += 1
            df.to_csv('output.csv',index = False)
    evaluate()
